// Staking Demo
// Author: Steve Ferrigno (@nullun)
//
// Global States:
//	+ A  - Admin
//	+ P  - Paused
//	+ SA - Staking Asset
//	+ RA - Reward Asset
//	+ BT - Begin Timestamp
//	+ ET - End Timestamp
//	+ TS - Total Staked
//	+ TR - Total Rewards (remaining)
//	+ LU - Last Updated
//
// Local States:
//	+ AS - Amount Staked
//	+ AR - Amount Rewarded
//	+ LU - Last Updated
//
#pragma version 6

// Deposit
// Who: Users
// Why: Add an amount of staked assets to the pool, increasing their share of
//      the rewards.
// Group:
//	[ * | axfer | appl | * ]
//	+ Asset Transfer sending staking asset into pool
txna ApplicationArgs 0
method "deposit(axfer,asset)void"
==
bnz method_deposit

// Withdraw
// Who: Users
// Why: Remove an amount of staked assets from the pool, decreasing their share
//      of the rewards.
// Group:
//	[ * | appl | * ]
// Args:
//	+ Staking/Reward Asset
//	+ Amount to withdraw
//	+ Account to withdraw asset to
txna ApplicationArgs 0
method "withdraw(asset,uint64,account)void"
==
bnz method_withdraw

// Config
// Who: Admin
// Why: Pause/unpause the contract, or change admin.
// Group:
//	[ * | appl | * ]
// Args:
//	+ Paused
//	+ Admin
txna ApplicationArgs 0
method "config(bool,account)void"
==
bnz method_config

// Update
// Who: Admin
// Why: In case of a security vulnerability the contract can be patched.
// Group:
//	[ * | appl | * ]
txna ApplicationArgs 0
method "update()void"
==
bnz method_update

// Deploy
// Who: Admin
// Why: Used to deploy the contract, defining assets and times.
// Group:
//	[ * | appl | * ]
// Args:
//	+ Staking Asset
//	+ Reward Asset
//	+ Begin Timestamp
//	+ End Timestamp
txna ApplicationArgs 0
method "deploy(asset,asset,uint64,uint64)void"
==
bnz method_deploy

// Init
// Who: Admin
// Why: Initialise the newly deployed contract, funding it with a minimum
//      balance and allowing it to opt in to the required assets.
// Group:
//	[ * | pay | appl | * ]
// Args:
//	+ Staking Asset
//	+ Reward Asset
txna ApplicationArgs 0
method "init(pay,asset,asset)void"
==
bnz method_init

// Update Rewards
// Who: Admin
// Why: Primarily used to supply the initial rewards for the staking contract,
//      but can also be used to add additional rewards before the contract ends.
// Group:
//	[ * | axfer | appl | * ]
// Args:
//	+ Fixed Rate
//	+ Reward Asset
txna ApplicationArgs 0
method "reward(axfer,uint64,asset)void"
==
bnz method_reward

err

// Deposit
// Scratch Spaces:
//	0: appl group position
//	1: axfer group position
method_deposit:
	callsub sub_is_not_paused

	// Can only deposit during an OptIn or NoOp
	txn OnCompletion
	int NoOp
	==
	txn OnCompletion
	int OptIn
	==
	||
	assert

	// Store this appl position
	txn GroupIndex
	store 0

	// Store the axfer position relative to the appl position
	load 0
	int 1
	-
	store 1

	// Confirm sender for this appl and the axfer are the same
	// Note: Do we need to care if it came from the same address?
	txn Sender
	load 1
	gtxns Sender
	==
	assert

	// Check the staking asset is being received by the smart contract
	load 1
	gtxns AssetReceiver
	global CurrentApplicationAddress
	==
	assert

	txn Sender
	callsub _calculate_rewards

	// Add deposit to users local state
	int 0
	byte "AS"
	dup2
	app_local_get
	load 1
	gtxns AssetAmount
	+
	app_local_put

	// Add shares to global
	byte "TS"
	dup
	app_global_get
	load 1
	gtxns AssetAmount
	+
	app_global_put

	int 1
	return

// Withdraw
method_withdraw:
	callsub sub_is_not_paused

	txn OnCompletion
	int NoOp
	==
	txn OnCompletion
	int CloseOut
	==
	||
	assert

	txn Sender
	callsub _calculate_rewards

	txna ApplicationArgs 1
	btoi
	txnas Assets

	txna ApplicationArgs 2
	btoi

	txna ApplicationArgs 3
	btoi
	txnas Accounts

	callsub sub_send_asset

	// If it's a NoOp (0) we can skip the closeout check
	txn OnCompletion
	bz skip_closeout_check

	// Make sure there's no outstanding staked
	txna ApplicationArgs 3
	btoi
	txnas Accounts
	byte "AS"
	app_local_get
	!
	assert

	// Make sure there's no outstanding rewards
	txna ApplicationArgs 3
	btoi
	txnas Accounts
	byte "AR"
	app_local_get
	!
	assert

skip_closeout_check:
	int 1
	return

// Deploy
method_deploy:
	// Can only deploy as a new smart contracts
	txn ApplicationID
	!
	assert

	// Use sender as admin
	int 0
	txnas Accounts
	callsub sub_set_admin

	// Set staking asset
	byte "SA"
	txn ApplicationArgs 1
	btoi
	txnas Assets
	app_global_put

	// Set reward asset
	byte "RA"
	txn ApplicationArgs 2
	btoi
	txnas Assets
	app_global_put

	// Set begin timestamp
	// Must be after LatestTimestamp
	byte "BT"
	txn ApplicationArgs 3
	btoi
	dup
	global LatestTimestamp
	>
	assert
	app_global_put

	// Set end timestamp
	// Must be after begin timestamp
	byte "ET"
	txn ApplicationArgs 4
	btoi
	dup
	txn ApplicationArgs 3
	btoi
	>
	assert
	app_global_put

	int 1
	return

// Init
// Scratch Spaces:
//	0: appl group position
//	1: pay group position
method_init:
	callsub sub_is_admin

	// Store this appl position
	txn GroupIndex
	store 0

	// Store the pay position relative to the appl position
	load 0
	int 1
	-
	store 1

	// Check receiver of payment is this smart contract
	load 1
	gtxns Receiver
	global CurrentApplicationAddress
	==
	assert

	// Check amount is greater than minimum balance requirement
	global CurrentApplicationAddress
	balance
	load 1
	gtxns Amount
	+
	global MinBalance
	txn NumAssets
	int 1
	+
	*
	global MinTxnFee
	txn NumAssets
	*
	+
	>=
	assert

	// OptIn to all assets
	int 1
	store 2
	optin_loop:
	load 2
	txn NumAssets
	<=
	bz optin_complete
	load 2
	txnas ApplicationArgs
	btoi
	txnas Assets
	callsub sub_optin_asset
	load 2
	int 1
	+
	store 2
	b optin_loop

	optin_complete:
	int 1
	return

// Reward
// Scratch Spaces:
//	0: appl group position
//	1: axfer group position
//	2: Reward Balance
method_reward:
	callsub sub_is_admin

	// Store this appl position
	txn GroupIndex
	store 0

	// Store the axfer position relative to the appl position
	load 0
	int 1
	-
	store 1

	// Check previous transaction is of type axfer
	load 1
	gtxns TypeEnum
	int axfer
	==
	assert

	// Check receiver of payment is this smart contract
	load 1
	gtxns AssetReceiver
	global CurrentApplicationAddress
	==
	assert

	// Check received asset is reward
	load 1
	gtxns XferAsset
	byte "RA"
	app_global_get
	==
	assert

	// Set Precision Scale
	byte "PS"
	byte "RA"
	app_global_get
	asset_params_get AssetDecimals
	assert
	app_global_put

	// Increase Total Rewards available
	byte "TR"
	dup
	app_global_get
	load 1
	gtxns AssetAmount
	+
	app_global_put

	// Set fixed rate
	byte "FR"
	txn ApplicationArgs 1
	btoi
	app_global_put

	int 1
	return

// Config
method_config:
	callsub sub_is_admin

	byte "P"
	txna ApplicationArgs 1
	btoi
	!
	!
	app_global_put

	txna ApplicationArgs 2
	btoi
	txnas Accounts
	callsub sub_set_admin

	int 1
	return

// Update
method_update:
	callsub sub_is_admin

	callsub sub_is_paused

	txn OnCompletion
	int UpdateApplication
	==
	assert

	int 1
	return

/////////////////
// Subroutines //
/////////////////

sub_set_admin:
	byte "A"
	swap
	app_global_put
	retsub

sub_is_not_paused:
	byte "P"
	app_global_get
	!
	assert
	retsub

sub_is_paused:
	byte "P"
	app_global_get
	assert
	retsub

sub_is_admin:
	txn Sender
	byte "A"
	app_global_get
	==
	assert
	retsub

// sub_optin_asset(asset)
// Arguments:
//	+ Asset
sub_optin_asset:
	itxn_begin

	itxn_field XferAsset

	int axfer
	itxn_field TypeEnum

	global CurrentApplicationAddress
	itxn_field AssetReceiver

	itxn_submit
	retsub

// sub_send_asset(asset,uint64,account)
// Arguments:
//	+ Asset
//	+ Amount
//	+ Account
// Scratch Space:
//	10: asset
//	11: asset amount
//	12: account
//	13: account asset amount
sub_send_asset:
	store 12
	store 11
	store 10

	// Check amount is less than or equal to the amount in users local state
	// If a larger value is requested, send the maximum the user has.
	load 11
	load 12
	byte "AR"
	byte "AS"
	load 10
	byte "SA"
	app_global_get
	==
	select
	app_local_get
	dup
	store 13
	<=
	bnz send_requested
	load 13
	store 11

	send_requested:
	// Remove amount from users local state
	// Note: This could be done without the above check due to underflow errors
	load 12
	byte "AR"
	byte "AS"
	load 10
	byte "SA"
	app_global_get
	==
	select
	dup2
	app_local_get
	load 11
	-
	app_local_put

	// Remove shares from global
	byte "TR"
	byte "TS"
	load 10
	byte "SA"
	app_global_get
	==
	select
	dup
	app_global_get
	load 11
	-
	app_global_put

	// Send asset
	itxn_begin

	int axfer
	itxn_field TypeEnum

	load 10
	itxn_field XferAsset

	load 11
	itxn_field AssetAmount

	load 12
	itxn_field AssetReceiver

	int 0
	itxn_field Fee

	itxn_submit
	retsub

// sub_convert_to_shares(uint64)
// Arguments:
//	+ Amount
// Scratch Space:
//	50: amount
sub_convert_to_shares:
	store 50

	// Get Staked Asset balance of smart contract
	global CurrentApplicationAddress
	byte "SA"
	app_global_get
	asset_holding_get AssetBalance
	assert
	dup
	store 51
	bz store_amount_as_shares

	// Get total Shares of smart contract
	byte "Shares"
	app_global_get
	dup
	store 52
	bz store_amount_as_shares

	// Calculate shares
	load 50
	load 51
	mulw
	int 0
	load 52
	divmodw
	pop
	pop
	swap
	int 0
	==
	assert
	retsub

store_amount_as_shares:
	load 50
	retsub

// Add to balance
// _add_to_balance(uint64,account)
// Arguments:
//	+ Amount
//	+ Account
// Scratch Space:
//	80: Amount
//	81: Account
_add_to_balance:
	store 81
	store 80

	// Local
	load 81
	byte "SA"
	dup2
	app_local_get
	load 80
	+
	app_local_put

	// Global
	byte "TS"
	dup
	app_global_get
	load 80
	+
	app_global_put

	retsub

// Remove from balance
// _remove_from_balance(uint64,account)
// Arguments:
//	+ Amount
//	+ Account
// Scratch Space:
//	80: Amount
//	81: Account
_remove_from_balance:
	store 81
	store 80

	// Local
	load 81
	byte "RA"
	dup2
	app_local_get
	load 80
	-
	app_local_put

	// Global
	byte "TR"
	dup
	app_global_get
	load 80
	-
	app_global_put

	retsub

// Calculate Rewards
// _calulcate_rewards(account)
// Arguments:
//	+ Account
// Scratch Space:
//	60: Account
//	61: Amount Staked
//	62: Duration
//	63: Reward
_calculate_rewards:
	store 60

	// Skip if not begun
	global LatestTimestamp
	byte "BT"
	app_global_get
	>
	bz skip_rewards


	// Skip if updated since ET
	load 60
	byte "LU"
	app_local_get
	byte "ET"
	app_global_get
	<
	bz skip_rewards

	// Reward the account based on size of stake and duration in the pool
	load 60
	byte "AS"
	app_local_get
	store 61

	// Calculate time since last updated
	// LatestTimestamp (or ET) - Earlier Call
	//
	// LatestTimestamp
	// 1) LT > BT (covered above)
	// 2) LT > ET ? ET : LT
	global LatestTimestamp
	byte "ET"
	app_global_get
	dup2
	>
	select
	// Earlier Call
	// 1) LT > BT (covered above)
	// 2) LU < BT ? BT : LU
	load 60
	byte "LU"
	app_local_get
	byte "BT"
	app_global_get
	dup2
	<
	select
	-
	store 62

	// Calculate
	// AS * Duration / 31,557,600
	int 0
	load 61
	int 0
	load 62
	mulw
	swap
	dup
	int 0
	==
	bz keep_high64
	b continue_divw
	keep_high64:
	swap
	continue_divw:
	int 31557600
	divw
	pop
	store 63

	load 63
	bz skip_rewards

	// Remove Rewards from Global
	byte "TR"
	dup
	app_global_get
	load 63
	-
	app_global_put

	// Add Rewards to Local
	load 60
	byte "AR"
	dup2
	app_local_get
	load 63
	+
	app_local_put

	// Update Global and Local Last Updated
	load 60
	byte "LU"
	global LatestTimestamp
	dup2
	app_global_put
	app_local_put

	skip_rewards:
	retsub

